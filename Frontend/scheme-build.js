import { Scheme, field, args as arguments_, argument, nonNull } from './graph-ql/gql.js'
import { GqlDate } from './graph-ql/gql-date.js'
import { GqlString } from './graph-ql/gql-string.js'
import { GqlBoolean } from './graph-ql/gql-boolean.js'
import { GqlLong } from './graph-ql/gql-long.js'
import { GqlId64, GqlNonNullId64 } from './graph-ql/gql-id64.js'
import { AddressTypes, Privileges, Directions, OperationTypes, States } from './api-settings.js'

export function schemeBuild () {
  const typeUnit = Scheme.newType('unit')
  const typeProductType = Scheme.newType('product_type')
  const typeNomenclature = Scheme.newType('nomenclature')
  const typeOwner = Scheme.newType('owner')
  const typeReason = Scheme.newType('reason')
  const typeUser = Scheme.newType('user')
  const typeOperation = Scheme.newType('operation')
  const typeAddress = Scheme.newType('address')
  const typeChange = Scheme.newType('change')
  const typeWarehouse = Scheme.newType('warehouse')
  const typeUncommittedOperation = Scheme.newType('uncommitted_operation')
  const typeUncommittedChange = Scheme.newType('uncommitted_change')
  const typeZone = Scheme.newType('zone')
  const typeDevice = Scheme.newType('device')
  const typeWebworker = Scheme.newType('webworker')
  typeUnit.addFields([field('name', GqlString), field('id', GqlId64)])
  typeProductType.addFields([field('name', GqlString), field('id', GqlId64)])
  typeNomenclature.addFields([field('designation', GqlString), field('name', GqlString), field('unit', typeUnit), field('product_type', typeProductType), field('id', GqlId64)])
  typeOwner.addFields([field('name', GqlString), field('id', GqlId64)])
  typeReason.addFields([field('name', GqlString), field('direction', Scheme.enum(Directions)), field('owner', typeOwner), field('id', GqlId64)])
  typeUser.addFields([field('login', GqlString), field('password', GqlString), field('privileges', Scheme.set(Scheme.enum(Privileges))), field('full_name', GqlString), field('personnel_number', GqlString), field('id', GqlId64)])
  typeOperation.addFields([field('destination', typeAddress), field('weight', GqlLong), field('user', typeUser), field('time_stamp', GqlDate), field('id', GqlId64)])
  typeAddress.addFields([field('type', Scheme.enum(AddressTypes)), field('name', GqlString), field('zone', typeZone), field('x', GqlLong), field('y', GqlLong), field('z', GqlLong), field('state', Scheme.enum(States)), field('id', GqlId64)])
  typeChange.addFields([field('source', typeAddress), field('operation', typeOperation, arguments_([argument('destination', GqlNonNullId64)], false)), field('nomenclature', typeNomenclature), field('quantity', GqlLong), field('owner', typeOwner), field('increment', GqlLong), field('reason', typeReason), field('basis', GqlString), field('id', GqlId64)])
  typeWarehouse.addFields([field('source', typeAddress), field('operation', typeOperation, arguments_([argument('destination', GqlNonNullId64)], false)), field('nomenclature', typeNomenclature), field('quantity', GqlLong), field('owner', typeOwner), field('increment', GqlLong), field('reason', typeReason), field('basis', GqlString), field('id', GqlId64), field('state', Scheme.enum(States))])
  typeUncommittedOperation.addFields([field('source', typeAddress), field('type', Scheme.enum(OperationTypes)), field('destination', typeAddress), field('weight', GqlLong), field('user', typeUser), field('time_stamp', GqlDate), field('is_virtual', GqlBoolean), field('id', GqlId64)])
  typeUncommittedChange.addFields([field('uncommitted_operation', typeUncommittedOperation), field('nomenclature', typeNomenclature), field('increment', GqlLong), field('reason', typeReason), field('owner', typeOwner), field('basis', GqlString), field('id', GqlId64)])
  typeZone.addFields([field('uncommitted_operation', typeUncommittedOperation), field('status', GqlLong), field('request', GqlLong), field('message', GqlId64), field('id', GqlId64)])
  typeDevice.addFields([field('x', GqlLong), field('y', GqlLong), field('z', GqlLong), field('errors', Scheme.array(GqlLong)), field('warnings', Scheme.array(GqlLong)), field('address', GqlLong), field('progress', GqlLong), field('mode', GqlLong), field('id', GqlId64)])
  typeWebworker.addFields([field('id', GqlString), field('ip', GqlString), field('user', typeUser)])
  Scheme.newQuery('create_token', GqlString, arguments_([argument('seed', GqlString)]))
  Scheme.newQuery('users', Scheme.map(typeUser), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('product_types', Scheme.map(typeProductType), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('units', Scheme.map(typeUnit), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('zones', Scheme.map(typeZone), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('unit_insert', GqlNonNullId64, arguments_([argument('name', GqlString)]))
  Scheme.newQuery('unit_delete', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('unit_update_name', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('owner_insert', GqlNonNullId64, arguments_([argument('name', GqlString)]))
  Scheme.newQuery('owner_delete', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('owner_update_name', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('nomenclatures', Scheme.map(typeNomenclature), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('nomenclature_insert', GqlNonNullId64, arguments_([argument('designation', GqlString), argument('name', GqlString), argument('unit', GqlNonNullId64), argument('product_type', GqlNonNullId64)]))
  Scheme.newQuery('nomenclature_delete', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('nomenclature_update_designation', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('nomenclature_update_name', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('nomenclature_update_unit', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlId64), argument('new', GqlId64)]))
  Scheme.newQuery('nomenclature_update_product_type', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlId64), argument('new', GqlId64)]))
  Scheme.newQuery('owners', Scheme.map(typeOwner), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('reasons', Scheme.map(typeReason), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('changes', Scheme.map(typeChange), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('warehouse', Scheme.map(typeWarehouse), arguments_([argument('id', GqlId64), argument('operation', GqlId64), argument('address', GqlId64)], false))
  Scheme.newQuery('addresses', Scheme.map(typeAddress), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('uncommitted_change_insert', GqlNonNullId64, arguments_([argument('uncommitted_operation', GqlNonNullId64), argument('nomenclature', GqlNonNullId64), argument('increment', GqlLong), argument('reason', GqlNonNullId64), argument('owner', GqlNonNullId64), argument('basis', GqlString)]))
  Scheme.newQuery('uncommitted_change_delete', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('run_operation', GqlBoolean, arguments_([argument('uncommitted_operation', GqlNonNullId64)]))
  Scheme.newQuery('operator_accept', GqlBoolean, arguments_([argument('uncommitted_operation', GqlNonNullId64)]))
  Scheme.newQuery('address_update_type', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', Scheme.enum(AddressTypes)), argument('new', Scheme.enum(AddressTypes))]))
  Scheme.newQuery('address_update_name', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('address_update_zone', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlId64), argument('new', GqlId64)]))
  Scheme.newQuery('address_update_x', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlLong), argument('new', GqlLong)]))
  Scheme.newQuery('address_update_y', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlLong), argument('new', GqlLong)]))
  Scheme.newQuery('address_update_z', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlLong), argument('new', GqlLong)]))
  Scheme.newQuery('address_update_state', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', Scheme.enum(States)), argument('new', Scheme.enum(States))]))
  Scheme.newQuery('uncommitted_operation_insert', GqlId64, arguments_([argument('source', GqlNonNullId64), argument('destination', GqlNonNullId64), argument('is_virtual', GqlBoolean)]))
  Scheme.newQuery('operations', Scheme.map(typeOperation), arguments_([argument('id', GqlNonNullId64)], false))
  Scheme.newQuery('uncommitted_operations', Scheme.map(typeUncommittedOperation), arguments_([argument('id', GqlNonNullId64)], false))
  // TODO: доработать возможности листов аргументов, чтобы принимали разные наборы аргументов
  Scheme.newQuery('uncommitted_changes', Scheme.map(typeUncommittedChange), arguments_([argument('id', GqlId64), argument('uncommitted_operation', GqlId64)], false))
  Scheme.newQuery('webworkers', Scheme.map(typeWebworker), arguments_([argument('id', GqlString)], false))
  Scheme.newQuery('devices', Scheme.map(typeDevice), arguments_([argument('id', nonNull(GqlNonNullId64))], false))
  Scheme.newQuery('uncommitted_operation_delete', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('user_insert', GqlNonNullId64, arguments_([argument('login', GqlString), argument('password', GqlString)]))
  Scheme.newQuery('user_delete', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('user_update_login', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('user_update_password', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('user_update_privileges', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', Scheme.enum(Privileges)), argument('new', Scheme.enum(Privileges))]))
  Scheme.newQuery('user_update_full_name', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('user_update_personnel_number', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('product_type_update_name', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('user_update_privilege', GqlNonNullId64, arguments_([argument('id', GqlNonNullId64), argument('privilege', Scheme.enum(Privileges)), argument('old', GqlBoolean), argument('new', GqlBoolean)]))
  Scheme.newQuery('change_mode', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('mode', GqlLong)]))
  Scheme.newQuery('reset', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('release_safety_lock', GqlBoolean, arguments_([argument('password', GqlString)]))
  Scheme.newQuery('product_type_insert', GqlBoolean, arguments_([argument('name', GqlString)]))
  Scheme.newQuery('product_type_delete', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('reason_insert', GqlNonNullId64, arguments_([argument('name', GqlString), argument('direction', Scheme.enum(Directions))]))
  Scheme.newQuery('reason_delete', GqlBoolean, arguments_([argument('id', GqlNonNullId64)]))
  Scheme.newQuery('reason_update_name', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('reason_update_direction', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', Scheme.enum(Directions)), argument('new', Scheme.enum(Directions))]))
  Scheme.newQuery('reason_update_owner', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlId64), argument('new', GqlId64)]))
  Scheme.newQuery('uncommitted_change_update_uncommitted_operation', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlId64), argument('new', GqlId64)]))
  Scheme.newQuery('uncommitted_change_update_nomenclature', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlId64), argument('new', GqlId64)]))
  Scheme.newQuery('uncommitted_change_update_increment', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlLong), argument('new', GqlLong)]))
  Scheme.newQuery('uncommitted_change_update_reason', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlId64), argument('new', GqlId64)]))
  Scheme.newQuery('uncommitted_change_update_owner', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlId64), argument('new', GqlId64)]))
  Scheme.newQuery('uncommitted_change_update_basis', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlString), argument('new', GqlString)]))
  Scheme.newQuery('operation_update_weight', GqlBoolean, arguments_([argument('id', GqlNonNullId64), argument('old', GqlLong), argument('new', GqlLong)]))
}
